{"version":3,"sources":["Cell.js","helpers.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","handleClick","evt","props","flipCellsAroundMe","chord","classes","this","isLit","className","onClick","Component","chance","nrows","ncols","max","random","boola","board","i","push","j","Math","floor","Board","flipCellsAround","coord","e","hasWon","state","steps","playing","split","map","Number","y","x","every","stopTimer","setState","calculateScore","extractMsSec","timeString","parseInt","bestPlayTime","stateTime","time","timeScore","timeScoreBase","stepScore","stepScoreBase","bestStepCount","sqrt","play","score","showTime","timeout","pause","restart","startTimer","startTime","Date","timeDiff","hh","mm","ss","xx","timer","setInterval","toString","padStart","clearInterval","bind","supper","document","addEventListener","event","key","toLowerCase","indexOf","coverStyle","height","width","fontSize","margin","left","coverStyle2","lineHeight","style","role","aria-label","type","id","htmlFor","src","frameBorder","title","row","_","col","__","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eab313d2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Cell.css\";\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  handleClick = evt => {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe(this.props.chord, evt);\n  };\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return <td className={classes} onClick={this.handleClick} />;\n  }\n}\n\nexport default Cell;\n","function getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nconst chance = (nrows, ncols) => {\n  const random = [0, 1, 1, 0, 0, 1];\n  const boola = [false, true];\n  let board = [];\n  for (let i = 0; i < ncols; i++) board.push([]);\n\n  for (let i = 0; i < nrows; i++) {\n    for (let j = 0; j < ncols; j++) {\n      board[i][j] = boola[random[getRandomInt(5)]];\n    }\n  }\n  return board;\n};\n\nconst superChance = (nrows, ncols) => {\n  return [\n    [false, false, false, false, false],\n    [false, false, true, false, false],\n    [false, true, true, true, false],\n    [false, false, true, false, false],\n    [false, false, false, false, false]\n  ];\n};\n\nexport { superChance, chance };\n","import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport { chance, superChance } from \"./helpers\";\nimport \"./Board.css\";\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    timeout: \"00:60:00\",\n    timeScoreBase: \"15\",\n    stepScoreBase: \"30\",\n    bestPlayTime: \"00:10:00\",\n    bestStepCount: 30\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      board: chance(this.props.nrows, this.props.ncols),\n      steps: 0,\n      score: 0,\n      time: \"00:00:00\",\n      playing: false,\n      timeout: false,\n      pause: false,\n      hasWon: false\n    };\n    this.showTime = this.showTime.bind(this);\n  }\n\n  componentDidMount() {\n    let supper = \"\";\n    document.addEventListener(\"keydown\", event => {\n      const charList = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n      const key = event.key.toLowerCase();\n\n      // once upon a spell\n      if (charList.indexOf(key) === -1) {\n        supper &&\n          supper === \"zubi\" &&\n          this.setState({\n            board: superChance(this.props.ncols, this.props.nrows)\n          });\n\n        supper = \"\";\n        return;\n      }\n\n      supper += key;\n    });\n  }\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    return board;\n  }\n\n  /** handles changing a cell: update board & determine if winner */\n  flipCellsAround = (coord, e) => {\n    const state = { ...this.state };\n    let { board, steps, playing } = state;\n    let hasWon;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    board[y][x] = !board[y][x];\n    if (board[y - 1]) board[y - 1][x] = !board[y - 1][x];\n    if (board[x + 1]) board[y][x + 1] = !board[y][x + 1];\n    if (board[x - 1]) board[y][x - 1] = !board[y][x - 1];\n    if (board[y + 1]) board[y + 1][x] = !board[y + 1][x];\n    steps++;\n\n    hasWon = board.every(y => y.every(x => x === false));\n\n    if (hasWon) {\n      this.stopTimer();\n      playing = false;\n    }\n    this.setState({ board, hasWon, steps, playing });\n  };\n\n  calculateScore = () => {\n    // extract time from string\n    const extractMsSec = timeString => {\n      if (!timeString) timeString = \"00:00:00\";\n      timeString = timeString.split(\":\");\n      let intTimeString =\n        parseInt(timeString[0]) * 3600 +\n        parseInt(timeString[1] * 60 + parseInt(timeString[2]));\n\n      return intTimeString / 1000;\n    };\n\n    // a = 2 rep score decrementing factor for every extra time\n    // b = 3 rep score decrementing factor for every extra step\n\n    const a = 2.5;\n    const b = 1.5;\n\n    let bestPlayTime = extractMsSec(this.props.bestPlayTime);\n    let stateTime = extractMsSec(this.state.time);\n\n    // formula from https://gamedev.stackexchange.com/questions/20636/score-based-on-game-play-time-and-a-int\n    let timeScore =\n      this.props.timeScoreBase * a ** Number(bestPlayTime - stateTime);\n    let stepScore =\n      this.props.stepScoreBase *\n      b ** Number(this.props.bestStepCount - this.state.steps);\n\n    return Math.floor(Math.sqrt(timeScore * stepScore));\n  };\n\n  // play game, reset state\n  play = () => {\n    this.stopTimer();\n    this.setState({\n      board: chance(this.props.nrows, this.props.ncols),\n      steps: 0,\n      score: 0,\n      time: this.showTime(0, 0, 0, 0),\n      timeout: false,\n      hasWon: false,\n      playing: true,\n      pause: false\n    });\n  };\n\n  restart = () => this.play();\n\n  // sometime it may matter to use locale date functions for set timer\n  startTimer = () => {\n    let startTime;\n    startTime = new Date();\n    let timeDiff = new Date() - startTime;\n    timeDiff /= 1000;\n    this.setState({ time: timeDiff });\n  };\n\n  // handles timer and clear interval after timeout\n  showTime = (hh, mm, ss, xx) => {\n    let time;\n    this.timer = setInterval(() => {\n      xx++;\n      ss = xx % 60;\n      mm = Math.floor(xx / 60);\n      hh = Math.floor(xx / 3600);\n\n      ss = ss.toString().padStart(2, \"0\");\n      mm = mm.toString().padStart(2, \"0\");\n      hh = hh.toString().padStart(2, \"0\");\n\n      time = `${hh}:${mm}:${ss}`;\n      if (time <= this.props.timeout) {\n        this.setState({ time });\n        return time;\n      } else {\n        this.setState({ timeout: true, playing: false, hasWon: false });\n        clearInterval(this.timer);\n      }\n    }, 1000);\n  };\n\n  stopTimer = () => {\n    clearInterval(this.timer);\n  };\n\n  /** Render game board or winning message or timeout. */\n\n  render() {\n    const { ncols, nrows } = this.props;\n\n    const coverStyle = {\n      height: `${ncols + 0.25}em`,\n      width: `${nrows + 0.25}em`,\n      fontSize: `${5}em`,\n      margin: \"auto\",\n      left: `calc(50% - ${nrows / 2 + 0.15}em)`\n    };\n\n    const coverStyle2 = { ...coverStyle };\n\n    coverStyle2.lineHeight = `${ncols}em`;\n\n    const { playing, time, timeout } = this.state;\n    return (\n      <div className=\"Board\">\n        <h1>Light Out!</h1>\n        {!playing && !timeout ? (\n          <div className=\"Board-cover playing\" style={coverStyle2}>\n            <span onClick={this.play} role=\"img\" aria-label=\"play\">\n              ▶️\n            </span>\n            <span className=\"Board-info\">\n              <div className=\"Board-info-tab\">\n                <input type=\"checkbox\" id=\"info\" />\n                <label className=\"tab-label\" htmlFor=\"info\">\n                  How to play\n                </label>\n                <div className=\"tab-content\">\n                  <p>\n                    Lights Out is a puzzle game, played on a grid of individual\n                    light which can either be lit or unlit.\n                  </p>\n                  The puzzle is won when all the lights are turned off. You can\n                  click on a cell to toggle that light -- but it also toggles\n                  the light above it, to the left of it, to the right of it and\n                  below it. (Cells on an edge or in the corner won't flip as\n                  many lights since they are missing some neighbors).\n                </div>\n              </div>\n            </span>\n          </div>\n        ) : !playing && timeout ? (\n          <div className=\"Board-cover timeout\" style={coverStyle}>\n            <h2>Timeout!!! {time}</h2>\n            <span onClick={this.restart} role=\"img\" aria-label=\"replay\">\n              🔄\n            </span>\n          </div>\n        ) : (\n          \"\"\n        )}\n        {/* <button onClick={this.stopTimer}>Stop timer</button> */}\n        {this.state.hasWon && !this.state.timeout && (\n          <div className=\"Board-cover won\" style={coverStyle}>\n            <h2>You Won</h2>\n            <iframe\n              src=\"https://giphy.com/embed/1dMNqVx9Kb12EBjFrc\"\n              frameBorder=\"0\"\n              className=\"giphy-embed won-giphy\"\n              title=\"won\"\n            ></iframe>\n            <p>Total Steps: {this.state.steps}</p>\n            <p>Score: {this.calculateScore(this.state.steps)}</p>\n            <span onClick={this.play} role=\"img\" aria-label=\"replay\">\n              🔄\n            </span>\n          </div>\n        )}\n\n        {playing && !timeout && <p>Time: {time}</p>}\n        <table>\n          <tbody>\n            {this.state.board.map((row, _) => (\n              <tr key={_}>\n                {row.map((col, __) => (\n                  <Cell\n                    key={__}\n                    chord={`${_}-${__}`}\n                    isLit={this.state.board[_][__]}\n                    flipCellsAroundMe={this.flipCellsAround}\n                  />\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}